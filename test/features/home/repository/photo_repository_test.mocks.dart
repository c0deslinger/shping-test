// Mocks generated by Mockito 5.4.5 from annotations
// in shping_test/test/features/home/repository/photo_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shping_test/core/services/connectivity_service.dart' as _i8;
import 'package:shping_test/features/home/data/datasource/local/photo_local_datasource.dart'
    as _i6;
import 'package:shping_test/features/home/data/datasource/remote/photo_api_datasource.dart'
    as _i3;
import 'package:shping_test/features/home/data/datasource/remote/unsplash_api_datasource.dart'
    as _i5;
import 'package:shping_test/features/home/data/entities/photo.dart' as _i2;
import 'package:shping_test/features/settings/providers/settings_provider.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhoto_0 extends _i1.SmartFake implements _i2.Photo {
  _FakePhoto_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PhotoApiDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoApiDataSource extends _i1.Mock
    implements _i3.PhotoApiDataSource {
  @override
  _i4.Future<List<_i2.Photo>> getPhotos({int? page = 1, int? perPage = 20}) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotos, [], {#page: page, #perPage: perPage}),
            returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Photo>>.value(
              <_i2.Photo>[],
            ),
          )
          as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<List<_i2.Photo>> searchPhotos(
    String? query, {
    int? page = 1,
    int? perPage = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchPhotos,
              [query],
              {#page: page, #perPage: perPage},
            ),
            returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Photo>>.value(
              <_i2.Photo>[],
            ),
          )
          as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<_i2.Photo> getPhotoDetails(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotoDetails, [id]),
            returnValue: _i4.Future<_i2.Photo>.value(
              _FakePhoto_0(this, Invocation.method(#getPhotoDetails, [id])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Photo>.value(
              _FakePhoto_0(this, Invocation.method(#getPhotoDetails, [id])),
            ),
          )
          as _i4.Future<_i2.Photo>);
}

/// A class which mocks [UnsplashApiDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnsplashApiDataSource extends _i1.Mock
    implements _i5.UnsplashApiDataSource {
  @override
  _i4.Future<List<_i2.Photo>> getPhotos({int? page = 1, int? perPage = 20}) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotos, [], {#page: page, #perPage: perPage}),
            returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Photo>>.value(
              <_i2.Photo>[],
            ),
          )
          as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<List<_i2.Photo>> searchPhotos(
    String? query, {
    int? page = 1,
    int? perPage = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchPhotos,
              [query],
              {#page: page, #perPage: perPage},
            ),
            returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Photo>>.value(
              <_i2.Photo>[],
            ),
          )
          as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<_i2.Photo> getPhotoDetails(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotoDetails, [id]),
            returnValue: _i4.Future<_i2.Photo>.value(
              _FakePhoto_0(this, Invocation.method(#getPhotoDetails, [id])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Photo>.value(
              _FakePhoto_0(this, Invocation.method(#getPhotoDetails, [id])),
            ),
          )
          as _i4.Future<_i2.Photo>);
}

/// A class which mocks [PhotoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoLocalDataSource extends _i1.Mock
    implements _i6.PhotoLocalDataSource {
  @override
  _i4.Future<List<_i2.Photo>> getPhotos(_i7.ImageSource? imagesource) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotos, [imagesource]),
            returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Photo>>.value(
              <_i2.Photo>[],
            ),
          )
          as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<void> cachePhotos(
    _i7.ImageSource? sourceKey,
    List<_i2.Photo>? photos, {
    required int? page,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#cachePhotos, [sourceKey, photos], {#page: page}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Photo>> getSearchResults(
    _i7.ImageSource? sourceKey,
    String? query,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSearchResults, [sourceKey, query]),
            returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Photo>>.value(
              <_i2.Photo>[],
            ),
          )
          as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<void> cacheSearchResults(
    _i7.ImageSource? sourceKey,
    String? query,
    List<_i2.Photo>? photos, {
    required int? page,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #cacheSearchResults,
              [sourceKey, query, photos],
              {#page: page},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.Photo?> getPhotoDetails(
    _i7.ImageSource? sourceKey,
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotoDetails, [sourceKey, id]),
            returnValue: _i4.Future<_i2.Photo?>.value(),
            returnValueForMissingStub: _i4.Future<_i2.Photo?>.value(),
          )
          as _i4.Future<_i2.Photo?>);

  @override
  _i4.Future<void> cachePhotoDetails(
    _i7.ImageSource? sourceKey,
    _i2.Photo? photo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cachePhotoDetails, [sourceKey, photo]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i8.ConnectivityService {
  @override
  bool get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set isConnected(bool? _isConnected) => super.noSuchMethod(
    Invocation.setter(#isConnected, _isConnected),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Stream<bool> get connectivityStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityStream),
            returnValue: _i4.Stream<bool>.empty(),
            returnValueForMissingStub: _i4.Stream<bool>.empty(),
          )
          as _i4.Stream<bool>);

  @override
  _i4.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void checkConnection(List<_i9.ConnectivityResult>? connectivityResult) =>
      super.noSuchMethod(
        Invocation.method(#checkConnection, [connectivityResult]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<bool> checkCurrentConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkCurrentConnectivity, []),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
